//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Digikey
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://b2bapi-productsearch-api.sl-production.ingress.east0.prd0.rke.nx.digikey.com/products/v4";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Enter parameters, keywords, or a manufacturer part number/DigiKey part number and receive many fields of product information for each match. Note that MyPricing is not returned.
        /// </summary>
        /// <remarks>
        /// Search for product information based on part number, description, manufacturer, or category. This new API supports two-legged and three-legged OAuth authentication. 
        /// <br/>[all endpoints for https://developer.digikey.com/products/product-information-v4/productsearch]
        /// <br/>
        /// <br/>While the MyPricing field is included in the KeywordSearch response, it will not be populated. Only StandardPricing will be included.
        /// <br/>Please use the ProductDetails or ProductPricing endpoints to receive MyPricing
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<KeywordResponse> KeywordSearchAsync(string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, KeywordRequest body)
        {
            return KeywordSearchAsync(includes, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enter parameters, keywords, or a manufacturer part number/DigiKey part number and receive many fields of product information for each match. Note that MyPricing is not returned.
        /// </summary>
        /// <remarks>
        /// Search for product information based on part number, description, manufacturer, or category. This new API supports two-legged and three-legged OAuth authentication. 
        /// <br/>[all endpoints for https://developer.digikey.com/products/product-information-v4/productsearch]
        /// <br/>
        /// <br/>While the MyPricing field is included in the KeywordSearch response, it will not be populated. Only StandardPricing will be included.
        /// <br/>Please use the ProductDetails or ProductPricing endpoints to receive MyPricing
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<KeywordResponse> KeywordSearchAsync(string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, KeywordRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/keyword"
                    urlBuilder_.Append("search/keyword");
                    urlBuilder_.Append('?');
                    if (includes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeywordResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enter a manufacturer part number/DigiKey part number and receive all the production information fields for a single-matched product. MyPricing is shown if applicable.
        /// <br/>If the manufacturer part number has more than one match, we will respond with an error, unless you supply the manufacturer id to get a single match.
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key product number. MyPricing is shown if applicable.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.
        /// </remarks>
        /// <param name="productNumber">The product to retrieve details for.</param>
        /// <param name="manufacturerId">Use when searching for manufacturer product number like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductDetails> ProductDetailsAsync(string productNumber, string manufacturerId, string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return ProductDetailsAsync(productNumber, manufacturerId, includes, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enter a manufacturer part number/DigiKey part number and receive all the production information fields for a single-matched product. MyPricing is shown if applicable.
        /// <br/>If the manufacturer part number has more than one match, we will respond with an error, unless you supply the manufacturer id to get a single match.
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key product number. MyPricing is shown if applicable.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.
        /// </remarks>
        /// <param name="productNumber">The product to retrieve details for.</param>
        /// <param name="manufacturerId">Use when searching for manufacturer product number like CR2032 that will match with multiple manufacturers. Setting this query field to a manufacturer id will get the exact match you want.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductDetails> ProductDetailsAsync(string productNumber, string manufacturerId, string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/productdetails"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/productdetails");
                    urlBuilder_.Append('?');
                    if (manufacturerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("manufacturerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(manufacturerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all Product Manufacturers. ManufacturersId can be used in KeywordRequestDto.Filters.ManufacturerIds to
        /// <br/>restrict a keyword search to a given Manufacturer
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ManufacturersResponse> ManufacturersAsync(string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site)
        {
            return ManufacturersAsync(authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all Product Manufacturers. ManufacturersId can be used in KeywordRequestDto.Filters.ManufacturerIds to
        /// <br/>restrict a keyword search to a given Manufacturer
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ManufacturersResponse> ManufacturersAsync(string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/manufacturers"
                    urlBuilder_.Append("search/manufacturers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManufacturersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all Product Categories. Category Id can be used in KeywordRequestDto.Filters.TaxonomyIds to restrict a
        /// <br/>keyword search to a given category
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoriesResponse> CategoriesAsync(string authorization)
        {
            return CategoriesAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all Product Categories. Category Id can be used in KeywordRequestDto.Filters.TaxonomyIds to restrict a
        /// <br/>keyword search to a given category
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoriesResponse> CategoriesAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/categories"
                    urlBuilder_.Append("search/categories");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoriesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns Category for given Id. Category Id can be used in KeywordRequestDto.Filters.TaxonomyIds to restrict a
        /// <br/>keyword search to a given category
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoryResponse> CategoriesByIdAsync(int categoryId, string authorization)
        {
            return CategoriesByIdAsync(categoryId, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Category for given Id. Category Id can be used in KeywordRequestDto.Filters.TaxonomyIds to restrict a
        /// <br/>keyword search to a given category
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoryResponse> CategoriesByIdAsync(int categoryId, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/categories/{categoryId}"
                    urlBuilder_.Append("search/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Calculate the DigiReel pricing for the given DigiKeyProductNumber and RequestedQuantity
        /// </summary>
        /// <param name="productNumber">The Digi-Key ProductNumber requested for Digi-Reel price calculation. It must be a
        /// <br/>Digi-Key Product number that is for a Digi-Reel pack type.</param>
        /// <param name="requestedQuantity">The quantity of the product you are looking to create a Digi-Reel with. Must be greater
        /// <br/>than 0.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DigiReelPricing> DigiReelPricingAsync(string productNumber, int requestedQuantity, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return DigiReelPricingAsync(productNumber, requestedQuantity, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculate the DigiReel pricing for the given DigiKeyProductNumber and RequestedQuantity
        /// </summary>
        /// <param name="productNumber">The Digi-Key ProductNumber requested for Digi-Reel price calculation. It must be a
        /// <br/>Digi-Key Product number that is for a Digi-Reel pack type.</param>
        /// <param name="requestedQuantity">The quantity of the product you are looking to create a Digi-Reel with. Must be greater
        /// <br/>than 0.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DigiReelPricing> DigiReelPricingAsync(string productNumber, int requestedQuantity, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            if (requestedQuantity == null)
                throw new System.ArgumentNullException("requestedQuantity");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/digireelpricing"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/digireelpricing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("requestedQuantity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(requestedQuantity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DigiReelPricing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a list of recommended products for the given Product number.
        /// </summary>
        /// <param name="productNumber">The Product being searched for</param>
        /// <param name="limit">The number of records to be returned</param>
        /// <param name="searchOptionList">A comma delimited list of filters that can be used to limit results. Available filters
        /// <br/>are the following: LeadFree, CollapsePackingTypes, ExcludeNonStock, Has3DModel, InStock, ManufacturerPartSearch,
        /// <br/>NewProductsOnly, RoHSCompliant.</param>
        /// <param name="excludeMarketPlaceProducts">Used to exclude MarkPlace products from search results. Default is false</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RecommendedProductsResponse> RecommendedProductsAsync(string productNumber, int? limit, string searchOptionList, bool? excludeMarketPlaceProducts, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site)
        {
            return RecommendedProductsAsync(productNumber, limit, searchOptionList, excludeMarketPlaceProducts, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of recommended products for the given Product number.
        /// </summary>
        /// <param name="productNumber">The Product being searched for</param>
        /// <param name="limit">The number of records to be returned</param>
        /// <param name="searchOptionList">A comma delimited list of filters that can be used to limit results. Available filters
        /// <br/>are the following: LeadFree, CollapsePackingTypes, ExcludeNonStock, Has3DModel, InStock, ManufacturerPartSearch,
        /// <br/>NewProductsOnly, RoHSCompliant.</param>
        /// <param name="excludeMarketPlaceProducts">Used to exclude MarkPlace products from search results. Default is false</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecommendedProductsResponse> RecommendedProductsAsync(string productNumber, int? limit, string searchOptionList, bool? excludeMarketPlaceProducts, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/recommendedproducts"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/recommendedproducts");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchOptionList != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchOptionList")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchOptionList, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeMarketPlaceProducts != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeMarketPlaceProducts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeMarketPlaceProducts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecommendedProductsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve Substitutions for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductSubstitutesResponse> SubstitutionsAsync(string productNumber, string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return SubstitutionsAsync(productNumber, includes, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve Substitutions for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductSubstitutesResponse> SubstitutionsAsync(string productNumber, string includes, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/substitutions"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/substitutions");
                    urlBuilder_.Append('?');
                    if (includes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductSubstitutesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve Associations for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="productNumber">The product to retrieve substitutions for.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductAssociationsResponse> AssociationsAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return AssociationsAsync(productNumber, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve Associations for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="productNumber">The product to retrieve substitutions for.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductAssociationsResponse> AssociationsAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/associations"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/associations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductAssociationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Provide a product number and quantity to receive product information such as pricing, available quantity, and the
        /// <br/>best
        /// <br/>packaging type for the requested quantity of the product.
        /// <br/>For example, given a requested quantity larger than a standard reel, this will return information about the
        /// <br/>standard tape and reel as well as either cut tape or DKR depending on the provided preference.
        /// <br/>Made for Cut Tape, Tape and Reel, and Digi-Reel products only. Other packaging types can be searched for, but
        /// <br/>results may vary.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </summary>
        /// <param name="productNumber">A product number. Can be either Digi-Key or Manufacturer, but some manufacturer product
        /// <br/>numbers are ambiguous and will not be found. A DKR product number will override a CT packagingPreference.</param>
        /// <param name="requestedQuantity">The quantity of the product that you are interested in. This will be used to determine
        /// <br/>the quantity to purchase in standard tape and reel, and also in your product preference for the remainder.</param>
        /// <param name="packagingPreference">Can be either "CT" for Cut Tape or "DKR" for Digi-Reel. This will select what package
        /// <br/>type to use for the remainder of quantity outside a standard reel.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PackageTypeByQuantityResponse> PackageTypeByQuantityAsync(string productNumber, int requestedQuantity, string packagingPreference, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return PackageTypeByQuantityAsync(productNumber, requestedQuantity, packagingPreference, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Provide a product number and quantity to receive product information such as pricing, available quantity, and the
        /// <br/>best
        /// <br/>packaging type for the requested quantity of the product.
        /// <br/>For example, given a requested quantity larger than a standard reel, this will return information about the
        /// <br/>standard tape and reel as well as either cut tape or DKR depending on the provided preference.
        /// <br/>Made for Cut Tape, Tape and Reel, and Digi-Reel products only. Other packaging types can be searched for, but
        /// <br/>results may vary.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </summary>
        /// <param name="productNumber">A product number. Can be either Digi-Key or Manufacturer, but some manufacturer product
        /// <br/>numbers are ambiguous and will not be found. A DKR product number will override a CT packagingPreference.</param>
        /// <param name="requestedQuantity">The quantity of the product that you are interested in. This will be used to determine
        /// <br/>the quantity to purchase in standard tape and reel, and also in your product preference for the remainder.</param>
        /// <param name="packagingPreference">Can be either "CT" for Cut Tape or "DKR" for Digi-Reel. This will select what package
        /// <br/>type to use for the remainder of quantity outside a standard reel.</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageTypeByQuantityResponse> PackageTypeByQuantityAsync(string productNumber, int requestedQuantity, string packagingPreference, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            if (requestedQuantity == null)
                throw new System.ArgumentNullException("requestedQuantity");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/packagetypebyquantity/{productNumber}"
                    urlBuilder_.Append("search/packagetypebyquantity/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("requestedQuantity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(requestedQuantity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (packagingPreference != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("packagingPreference")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(packagingPreference, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageTypeByQuantityResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all media for a given product
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MediaResponse> MediaAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return MediaAsync(productNumber, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all media for a given product
        /// </summary>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MediaResponse> MediaAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/media"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/media");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MediaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enter a manufacturer part number/DigiKey part number or partial manufacturer part number/DigiKey part number and receive product information fields for each matched product. MyPricing is shown if applicable.
        /// </summary>
        /// <remarks>
        /// Allows you to use inStock and excludeMarketplace as limit. If there are multiple matching parts, you can see the additional ones by incrementing your input using the offset and limit fields. Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.
        /// </remarks>
        /// <param name="productNumber">ProducuctNubmer to search on. Can be partial part number, manufacturer part number, or a Digi-Key part number.	Enter the ProductNumber to be searched. You can enter a manufacturer part number or a DigiKey part number. You can enter a partial or complete product number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number.</param>
        /// <param name="limit">Enter the maximum number of products to be returned. The maximum amount is 10. Default value: 5</param>
        /// <param name="offset">Enter the starting index for the records to be returned. This is used when making subsequent calls for the same ProductNumber. Default value: 0</param>
        /// <param name="inStock">Enter true to exclude products that are not in stock. Default value : false</param>
        /// <param name="excludeMarketplace">Enter true to exclude Marketplace items and limit results to those fulfilled by DigiKey. Default value: false</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Locale_Site">This value determines which country’s prices are used for StandardPricing and MyPricing. Also, product restrictions can differ by country. Acceptable values include: AT, AU, BE, BG, BR, CA, CH, CN, CZ, DE, DK, EE, ES, FI, FR, GR, HK, HU, IE, IL, IN, IT, JP, KR, LT, LU, LV, MX, MY, NL, NO, NZ, PH, PL, PT, RO, SE, SG, SI, SK, TH, TW, UK, US, ZA
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Locale_Language">This value determines which language is used for the links in reply. If the entered language is not valid for the entered Locale-Site, it will default to English. Acceptable values include: CS, DA, DE, EN, ES, FI, FR, HE, HU, IT, JA, KO, NL, NO, PL, PT, RO, SV, TH, ZHS, ZHT
        /// <br/>Default value: English</param>
        /// <param name="x_DIGIKEY_Locale_Currency">This value determines which country’s prices are used for StandardPricing and MyPricing. If the value is not allowed for the entered Locale-Site, it defaults to the primary currency for that Locale-Site. Ex: If Locale-Currency = EUR and Locale-Site = US, then the system will default to USD and note that in the response. Acceptable values include: AUD, CAD, CHF, CNY, CZK, DKK, EUR, GBP, HKD, HUF, ILS, INR, JPY, KRW, MYR, NOK, NZD, PHP, PLN, RON, SEK, SGD, THB, TWD, USD, ZAR
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Customer_Id">This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.</param>
        /// <param name="x_DIGIKEY_Client_Id">The Client Id for your App. Enter the ClientID for the Product App used to make the call.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductPricingResponse> ProductPricingAsync(string productNumber, int? limit, int? offset, bool? inStock, bool? excludeMarketplace, string authorization, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Customer_Id, string x_DIGIKEY_Client_Id)
        {
            return ProductPricingAsync(productNumber, limit, offset, inStock, excludeMarketplace, authorization, x_DIGIKEY_Locale_Site, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Customer_Id, x_DIGIKEY_Client_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enter a manufacturer part number/DigiKey part number or partial manufacturer part number/DigiKey part number and receive product information fields for each matched product. MyPricing is shown if applicable.
        /// </summary>
        /// <remarks>
        /// Allows you to use inStock and excludeMarketplace as limit. If there are multiple matching parts, you can see the additional ones by incrementing your input using the offset and limit fields. Locale information is required in the headers for accurate pricing and currencies. Locale and currencies will be set to default values if not populated or populated with invalid values. Check the “Settings Used” fields to see which values we used for the response.
        /// </remarks>
        /// <param name="productNumber">ProducuctNubmer to search on. Can be partial part number, manufacturer part number, or a Digi-Key part number.	Enter the ProductNumber to be searched. You can enter a manufacturer part number or a DigiKey part number. You can enter a partial or complete product number. The search results are better when entering a DigiKey product number, as some manufacturers share the same manufacturer part number.</param>
        /// <param name="limit">Enter the maximum number of products to be returned. The maximum amount is 10. Default value: 5</param>
        /// <param name="offset">Enter the starting index for the records to be returned. This is used when making subsequent calls for the same ProductNumber. Default value: 0</param>
        /// <param name="inStock">Enter true to exclude products that are not in stock. Default value : false</param>
        /// <param name="excludeMarketplace">Enter true to exclude Marketplace items and limit results to those fulfilled by DigiKey. Default value: false</param>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Locale_Site">This value determines which country’s prices are used for StandardPricing and MyPricing. Also, product restrictions can differ by country. Acceptable values include: AT, AU, BE, BG, BR, CA, CH, CN, CZ, DE, DK, EE, ES, FI, FR, GR, HK, HU, IE, IL, IN, IT, JP, KR, LT, LU, LV, MX, MY, NL, NO, NZ, PH, PL, PT, RO, SE, SG, SI, SK, TH, TW, UK, US, ZA
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Locale_Language">This value determines which language is used for the links in reply. If the entered language is not valid for the entered Locale-Site, it will default to English. Acceptable values include: CS, DA, DE, EN, ES, FI, FR, HE, HU, IT, JA, KO, NL, NO, PL, PT, RO, SV, TH, ZHS, ZHT
        /// <br/>Default value: English</param>
        /// <param name="x_DIGIKEY_Locale_Currency">This value determines which country’s prices are used for StandardPricing and MyPricing. If the value is not allowed for the entered Locale-Site, it defaults to the primary currency for that Locale-Site. Ex: If Locale-Currency = EUR and Locale-Site = US, then the system will default to USD and note that in the response. Acceptable values include: AUD, CAD, CHF, CNY, CZK, DKK, EUR, GBP, HKD, HUF, ILS, INR, JPY, KRW, MYR, NOK, NZD, PHP, PLN, RON, SEK, SGD, THB, TWD, USD, ZAR
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Customer_Id">This value determines if MyPricing, if available, will be returned and which region’s pricing agreement will be used. MyPricing is set for the country of the CustomerID’s physical location. The CustomerID must have a myDIGIKEY registration tied to that location.</param>
        /// <param name="x_DIGIKEY_Client_Id">The Client Id for your App. Enter the ClientID for the Product App used to make the call.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductPricingResponse> ProductPricingAsync(string productNumber, int? limit, int? offset, bool? inStock, bool? excludeMarketplace, string authorization, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Customer_Id, string x_DIGIKEY_Client_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/pricing"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pricing");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inStock != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inStock")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inStock, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeMarketplace != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeMarketplace")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeMarketplace, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve Alternate Packaging for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AlternatePackagingResponse> AlternatePackagingAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id)
        {
            return AlternatePackagingAsync(productNumber, authorization, x_DIGIKEY_Client_Id, x_DIGIKEY_Locale_Language, x_DIGIKEY_Locale_Currency, x_DIGIKEY_Locale_Site, x_DIGIKEY_Customer_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve Alternate Packaging for a given product
        /// </summary>
        /// <remarks>
        /// Works best with a Digi-Key Product number. Some manufacturer product numbers conflict with unrelated products and
        /// <br/>may not
        /// <br/>return the correct product.
        /// <br/>Locale information is required in the headers for accurate pricing and currencies. Locale defaults to United
        /// <br/>States.
        /// </remarks>
        /// <param name="authorization">OAuth Bearer Token. Please see&lt;a href= "https://developer.digikey.com/documentation/oauth" target= "_blank" &gt; OAuth 2.0 Documentation &lt;/a &gt; page for more info.</param>
        /// <param name="x_DIGIKEY_Client_Id">The CliendId for your app.</param>
        /// <param name="x_DIGIKEY_Locale_Language">Two letter code for language to search on. Langauge must be supported by the selected site. If searching on keyword, this language is used to find matches. Acceptable values include: en, ja, de, fr, ko, zhs, zht, it, es, he, nl, sv, pl, fi, da, no.
        /// <br/>Default value: en</param>
        /// <param name="x_DIGIKEY_Locale_Currency">Three letter code for Currency to return part pricing for. Currency must be supported by the selected site. Acceptable values include: USD, CAD, JPY, GBP, EUR, HKD, SGD, TWD, KRW, AUD, NZD, INR, DKK, NOK, SEK, ILS, CNY, PLN, CHF, CZK, HUF, RON, ZAR, MYR, THB, PHP.
        /// <br/>Default value: primary currency for the entered Locale-site.</param>
        /// <param name="x_DIGIKEY_Locale_Site">Two letter code for Digi-Key product website to search on. Different countries sites have different part restrictions, supported languages, and currencies. Acceptable values include: US, CA, JP, UK, DE, AT, BE, DK, FI, GR, IE, IT, LU, NL, NO, PT, ES, KR, HK, SG, CN, TW, AU, FR, IN, NZ, SE, MX, CH, IL, PL, SK, SI, LV, LT, EE, CZ, HU, BG, MY, ZA, RO, TH, PH.
        /// <br/>Default value: US</param>
        /// <param name="x_DIGIKEY_Customer_Id">Your Digi-Key Customer id. If your account has multiple Customer Ids for different regions, this allows you to select one of them.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlternatePackagingResponse> AlternatePackagingAsync(string productNumber, string authorization, string x_DIGIKEY_Client_Id, string x_DIGIKEY_Locale_Language, string x_DIGIKEY_Locale_Currency, string x_DIGIKEY_Locale_Site, string x_DIGIKEY_Customer_Id, System.Threading.CancellationToken cancellationToken)
        {
            if (productNumber == null)
                throw new System.ArgumentNullException("productNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Client_Id == null)
                        throw new System.ArgumentNullException("x_DIGIKEY_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Client-Id", ConvertToString(x_DIGIKEY_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Language != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Language", ConvertToString(x_DIGIKEY_Locale_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Currency != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Currency", ConvertToString(x_DIGIKEY_Locale_Currency, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Locale_Site != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Locale-Site", ConvertToString(x_DIGIKEY_Locale_Site, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DIGIKEY_Customer_Id != null)
                        request_.Headers.TryAddWithoutValidation("X-DIGIKEY-Customer-Id", ConvertToString(x_DIGIKEY_Customer_Id, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search/{productNumber}/alternatepackaging"
                    urlBuilder_.Append("search/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/alternatepackaging");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlternatePackagingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Bad Request - The input model is invalid or malformed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Unauthorized - Token is expired or Client Id or subscription are invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("The target resource is forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Not Found - The requested resource could not be found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Too Many Requests - Your rate limit has been exceeded", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("An unhandled error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DKProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<DKProblemDetails>("Service Unavailable - The service is temporarily unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Alternate Packaging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternatePackaging
    {
        /// <summary>
        /// Alternate packaging options for this product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AlternatePackaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSummary> AlternatePackaging1 { get; set; }

    }

    /// <summary>
    /// Response model for AlternatePackaging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternatePackagingResponse
    {
        [Newtonsoft.Json.JsonProperty("AlternatePackagings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternatePackaging AlternatePackagings { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseFilterV4
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ProductCount { get; set; }

    }

    /// <summary>
    /// Base Product Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProduct
    {
        /// <summary>
        /// Manufacturer Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Manufacturer Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Response model for Categories call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoriesResponse
    {
        /// <summary>
        /// Count of Products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductCount { get; set; }

        /// <summary>
        /// List of Categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Category> Categories { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    /// <summary>
    /// Categories are used to filter results of a given search
    /// <br/>Example: When searching for batteries a category filter can be used to limit the search to rechargeable batteries
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category
    {
        /// <summary>
        /// CategoryId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// The Id of the Parent Category if the given category is a child of another category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Category Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Number of Products in the Category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ProductCount { get; set; }

        /// <summary>
        /// List of Child Categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Category> Children { get; set; }

    }

    /// <summary>
    /// Category Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryNode
    {
        /// <summary>
        /// The Category Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// If this is a child category, this is the Id of the parent category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Category name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of products in the category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ProductCount { get; set; }

        /// <summary>
        /// The number of new products in the category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NewProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NewProductCount { get; set; }

        /// <summary>
        /// The URL of the image of the category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// The SEO description for the category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SeoDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeoDescription { get; set; }

        /// <summary>
        /// A list of all children of the category - Their parent Id will be Category Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ChildCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CategoryNode> ChildCategories { get; set; }

    }

    /// <summary>
    /// Response model for a single Category call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponse
    {
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category Category { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryType
    {
        /// <summary>
        /// ID for DigiKey product category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// DigiKey Product Category level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }

        /// <summary>
        /// Name of DigiKey product category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Environmental and Export Classifications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classifications
    {
        /// <summary>
        /// ReachStatus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReachStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReachStatus { get; set; }

        /// <summary>
        /// RohsStatus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RohsStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RohsStatus { get; set; }

        /// <summary>
        /// Code for Moisture Sensitivity Level of the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MoistureSensitivityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoistureSensitivityLevel { get; set; }

        /// <summary>
        /// Export control class number. See documentation from the U.S. Department of Commerce.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExportControlClassNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportControlClassNumber { get; set; }

        /// <summary>
        /// Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HtsusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtsusCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DKProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description
    {
        /// <summary>
        /// Description of the product. If you entered a valid Locale and Language in the input, we will return the description in that language. Otherwise, we’ll return the English description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Detailed description of the product. If you entered a valid Locale and Language in the input, we will return the description in that language. Otherwise, we’ll return the English description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DetailedDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedDescription { get; set; }

    }

    /// <summary>
    /// Response for Digi-Reel Pricing Request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DigiReelPricing
    {
        /// <summary>
        /// Fee per reel ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReelingFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReelingFee { get; set; }

        /// <summary>
        /// Price of a single unit of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The total price of the requested reels and the reeling fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtendedPrice { get; set; }

        /// <summary>
        /// The passed in quantity of the product you are looking to create a Digi-Reel with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequestedQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    /// <summary>
    /// Filter Id
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterId
    {
        /// <summary>
        /// The Id of the Filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterOptions
    {
        /// <summary>
        /// The Manufacturers that can be filtered to narrow next search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Manufacturers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseFilterV4> Manufacturers { get; set; }

        /// <summary>
        /// Packaging that can be filtered to narrow next search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Packaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseFilterV4> Packaging { get; set; }

        /// <summary>
        /// Status that can be filtered to narrow next search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseFilterV4> Status { get; set; }

        /// <summary>
        /// Series that can be filtered to narrow next search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseFilterV4> Series { get; set; }

        /// <summary>
        /// ParaetricFilter that can be filtered to narrow next search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParametricFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParameterFilterOptionsResponse> ParametricFilters { get; set; }

        /// <summary>
        /// the top Categories to filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TopCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TopCategory> TopCategories { get; set; }

        /// <summary>
        /// Marketplace Filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketPlaceFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MarketPlaceFilters> MarketPlaceFilters { get; set; }

    }

    /// <summary>
    /// Filtering options for keyword search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterOptionsRequest
    {
        /// <summary>
        /// Filter on Manufacturer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> ManufacturerFilter { get; set; }

        /// <summary>
        /// Category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CategoryFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> CategoryFilter { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> StatusFilter { get; set; }

        /// <summary>
        /// Packaging
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PackagingFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> PackagingFilter { get; set; }

        /// <summary>
        /// MarketPlaceFilter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketPlaceFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilterOptionsRequestMarketPlaceFilter? MarketPlaceFilter { get; set; }

        /// <summary>
        /// SeriesFilter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SeriesFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> SeriesFilter { get; set; }

        /// <summary>
        /// The MinimumQuantityAvailable for the result to display
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumQuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumQuantityAvailable { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterFilterRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParameterFilterRequest ParameterFilterRequest { get; set; }

        /// <summary>
        /// /SearchOptions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SearchOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SearchOptions> SearchOptions { get; set; }

    }

    /// <summary>
    /// Filter Values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterValue
    {
        /// <summary>
        /// Number of products with this filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ProductCount { get; set; }

        /// <summary>
        /// Filter Value Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueId { get; set; }

        /// <summary>
        /// Filter Value Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueName { get; set; }

        /// <summary>
        /// Filter Range - possible values: Min, Max, Range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RangeFilterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilterValueRangeFilterType? RangeFilterType { get; set; }

    }

    /// <summary>
    /// Filters used for search
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filters
    {
        /// <summary>
        /// Did we use the “IsInStock” limit?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInStock { get; set; }

        /// <summary>
        /// Did we use the “ExcludeMarketplace” limit?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExcludeMarketplace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeMarketplace { get; set; }

    }

    /// <summary>
    /// The validated locale that was used for the search. If the provided locale was invalid, this will show the corrections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsoSearchLocale
    {
        /// <summary>
        /// The site we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Site { get; set; }

        /// <summary>
        /// The language we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// The currency we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    /// <summary>
    /// Criteria for Keyword Requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeywordRequest
    {
        /// <summary>
        /// A String of Keywords, up to 250 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

        /// <summary>
        /// Number of products to return between 1 and 50.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>
        /// The starting index of the records returned. This is used to paginate beyond RecordCount number of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterOptionsRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterOptionsRequest FilterOptionsRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortOptions SortOptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeywordResponse
    {
        [Newtonsoft.Json.JsonProperty("Products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Product> Products { get; set; }

        /// <summary>
        /// Total number of matching products found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExactMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Product> ExactMatches { get; set; }

        [Newtonsoft.Json.JsonProperty("FilterOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterOptions FilterOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("AppliedParametricFiltersDto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> AppliedParametricFiltersDto { get; set; }

    }

    /// <summary>
    /// Manufacturer Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Manufacturer
    {
        /// <summary>
        /// Manufacturer Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Manufacturer Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Manufacturer information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManufacturerInfo
    {
        /// <summary>
        /// Manufacturer Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Manufacturer Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// List of Manufacturers and information about each manufacturer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManufacturersResponse
    {
        /// <summary>
        /// List of Manufacturer Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Manufacturers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ManufacturerInfo> Manufacturers { get; set; }

    }

    /// <summary>
    /// Media links for a product.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MediaLinks
    {
        /// <summary>
        /// The type of media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MediaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>
        /// The title of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// URL to a small photo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SmallPhoto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallPhoto { get; set; }

        /// <summary>
        /// URL to the thumbnail image of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// URL of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Response model for Media
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MediaResponse
    {
        /// <summary>
        /// List of Media Links
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MediaLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MediaLinks> MediaLinks { get; set; }

    }

    /// <summary>
    /// Type of packaging for the product. Not all products are available in all packaging types. Possibilities include but are not limited to: Tape and Reel(TR), Cut Tape(CT), Digi-Reel, Tube, Tray, and Bulk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageType
    {
        /// <summary>
        /// PackageType Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// PackageType Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Aggregator Product Dto
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageTypeByQuantityProduct
    {
        /// <summary>
        /// Recommended quantity for product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecommendedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecommendedQuantity { get; set; }

        /// <summary>
        /// The Digi-Key part number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiKeyProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigiKeyProductNumber { get; set; }

        /// <summary>
        /// Quantity of the product available for immediate sale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// Catalog description of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Extended catalog description of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DetailedDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedDescription { get; set; }

        /// <summary>
        /// Manufacturer of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for
        /// <br/>different parts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// The minimum quantity to order from Digi-Key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumOrderQuantity { get; set; }

        /// <summary>
        /// The URL to the product's datasheet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrimaryDatasheetUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryDatasheetUrl { get; set; }

        /// <summary>
        /// The URL to the product's image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrimaryPhotoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryPhotoUrl { get; set; }

        /// <summary>
        /// Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key,
        /// <br/>Last Time Buy, Not For New Designs, Preliminary. For obsolete parts the part
        /// <br/>will become a non-stocking item when stock is depleted; minimums will apply.
        /// <br/>Order the quantity available or the quantity available plus a multiple of the
        /// <br/>minimum order quantity.
        /// <br/>///
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductStatus { get; set; }

        /// <summary>
        /// The number of weeks expected to receive stock from manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerLeadWeeks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerLeadWeeks { get; set; }

        /// <summary>
        /// Quantity of this product available to order from manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerWarehouseQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ManufacturerWarehouseQuantity { get; set; }

        /// <summary>
        /// RoHS status. Can be RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor
        /// <br/>undefined, Request Inventory Verification, or ROHS3 Compliant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RohsStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RohsStatus { get; set; }

        /// <summary>
        /// Boolean value for RoHS compliance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RoHSCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoHSCompliant { get; set; }

        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CategoryNode Category { get; set; }

        [Newtonsoft.Json.JsonProperty("ReachStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReachStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("MoistureSensitivityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoistureSensitivityLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("HtsusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtsusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ExportControlClassNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportControlClassNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageType PackageType { get; set; }

        /// <summary>
        /// Maximum order quantity for Distribution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxQuantityForDistribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxQuantityForDistribution { get; set; }

        /// <summary>
        /// The number of products in the manufacturer's standard package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StandardPackage { get; set; }

        /// <summary>
        /// Is a Tariff active
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TariffActive { get; set; }

        /// <summary>
        /// Quantity of this product ordered but not immediately available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// Standard pricing for the validated locale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> StandardPricing { get; set; }

        /// <summary>
        /// My pricing for the validated locale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MyPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> MyPricing { get; set; }

        /// <summary>
        /// Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Is this product a marketplace product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketPlace { get; set; }

        /// <summary>
        /// Name of product supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Supplier { get; set; }

        /// <summary>
        /// Description of Digi-Key's current stocking status for the product. Possible values include: In Stock, Temporarily
        /// <br/>Out of Stock, and Limited Supply - Call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StockNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StockNote { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PackageTypes { get; set; }

    }

    /// <summary>
    /// Response from a PackageTypeByQuantity Search Service request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageTypeByQuantityResponse
    {
        /// <summary>
        /// List of products that matched the PackageTypeByQuantitySearchService request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackageTypeByQuantityProduct> Products { get; set; }

    }

    /// <summary>
    /// Parameter Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Parameter Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Parameter Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Parameter priority
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

    }

    /// <summary>
    /// ParameterFilter Options Response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterFilterOptionsResponse
    {
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseFilterV4 Category { get; set; }

        /// <summary>
        /// Parameter Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterType { get; set; }

        /// <summary>
        /// Parameter Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParameterId { get; set; }

        /// <summary>
        /// Parameter Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        /// <summary>
        /// List of Filter Values for the Parameter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FilterValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterValue> FilterValues { get; set; }

    }

    /// <summary>
    /// Request information for using parameter filters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterFilterRequest
    {
        [Newtonsoft.Json.JsonProperty("CategoryFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterId CategoryFilter { get; set; }

        /// <summary>
        /// The list of search parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParametricCategory> ParameterFilters { get; set; }

    }

    /// <summary>
    /// Parameters are used to refine search results.
    /// <br/>Example: If searching for batteries you can use the battery size parameter filter with a value of AAA.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterValue
    {
        /// <summary>
        /// Parameter Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParameterId { get; set; }

        /// <summary>
        /// Parameter Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterText { get; set; }

        /// <summary>
        /// Parameter Data Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParameterValueParameterType? ParameterType { get; set; }

        /// <summary>
        /// The Id of the Parameter value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueId { get; set; }

        /// <summary>
        /// The text of the Parameter value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueText { get; set; }

    }

    /// <summary>
    /// Parametric Category
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParametricCategory
    {
        /// <summary>
        /// Parameter Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParameterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParameterId { get; set; }

        /// <summary>
        /// List of FilterIdDtos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FilterValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterId> FilterValues { get; set; }

    }

    /// <summary>
    /// Price when a product is purchased by specific quantities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceBreak
    {
        /// <summary>
        /// The quantity at which the price takes effect
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BreakQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BreakQuantity { get; set; }

        /// <summary>
        /// The unit price for the quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The total price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

    }

    /// <summary>
    /// Product info
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>
        /// The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// The price for a single unit of this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// The URL to the product's datasheet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DatasheetUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatasheetUrl { get; set; }

        /// <summary>
        /// The URL to the product's image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PhotoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhotoUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductVariations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductVariation> ProductVariations { get; set; }

        /// <summary>
        /// The sum of the quantity for all package types that are found in ProductVariations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QuantityAvailable { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductStatusV4 ProductStatus { get; set; }

        /// <summary>
        /// True if back order is not allowed for this product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BackOrderNotAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BackOrderNotAllowed { get; set; }

        /// <summary>
        /// Indicates if a product is normally stocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NormallyStocking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NormallyStocking { get; set; }

        /// <summary>
        /// This product is no longer sold at Digi-Key and will no longer be stocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Discontinued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Discontinued { get; set; }

        /// <summary>
        /// This product is no longer manufactured and will no longer be stocked once stock is depleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndOfLife", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EndOfLife { get; set; }

        /// <summary>
        /// Is product non-cancellable and non-returnable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Ncnr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ncnr { get; set; }

        /// <summary>
        /// The URL to the product's video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrimaryVideoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryVideoUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParameterValue> Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProduct BaseProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CategoryNode Category { get; set; }

        /// <summary>
        /// Last date that the product will be available for purchase. Date is in ISO 8601.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateLastBuyChance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateLastBuyChance { get; set; }

        /// <summary>
        /// The number of weeks expected to receive stock from manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerLeadWeeks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerLeadWeeks { get; set; }

        /// <summary>
        /// Quantity of this product available to order from manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerPublicQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ManufacturerPublicQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("Series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Series Series { get; set; }

        /// <summary>
        /// Additional shipping information - if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("Classifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Classifications Classifications { get; set; }

    }

    /// <summary>
    /// Product Associations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductAssociations
    {
        /// <summary>
        /// Kits that this product is contained in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Kits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSummary> Kits { get; set; }

        /// <summary>
        /// An association of same manufacturer products that mate with each other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MatingProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSummary> MatingProducts { get; set; }

        /// <summary>
        /// Products that are directly correlated to complete the intended function of the product. These products may be either same manufacturer or differ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AssociatedProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSummary> AssociatedProducts { get; set; }

        /// <summary>
        /// Products that are directly correlated to complete the intended function of th product. These products may be either same manufacturer or differ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForUseWithProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSummary> ForUseWithProducts { get; set; }

    }

    /// <summary>
    /// Response model for ProductAssociations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductAssociationsResponse
    {
        [Newtonsoft.Json.JsonProperty("ProductAssociations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductAssociations ProductAssociations { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDetails
    {
        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

    }

    /// <summary>
    /// Product
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPricing
    {
        /// <summary>
        /// The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        /// <summary>
        /// In-stock quantity that is available for immediate shipping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// This product is no longer sold at DigiKey and will no longer be restocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsDiscontinued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDiscontinued { get; set; }

        /// <summary>
        /// Indicates if a product is normally stocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NormallyStocking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NormallyStocking { get; set; }

        /// <summary>
        /// Product is obsolete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsObsolete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsObsolete { get; set; }

        /// <summary>
        /// The number of weeks expected to receive stock from manufacturer to DigiKey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerLeadWeeks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerLeadWeeks { get; set; }

        /// <summary>
        /// The manufacturer’s factory stock that can be ordered and will ship once DigiKey receives it from the manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerPublicQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ManufacturerPublicQuantity { get; set; }

        /// <summary>
        /// The number of products in the manufacturer's standard package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StandardPackage { get; set; }

        /// <summary>
        /// Export control class number. See documentation from the U.S. Department of Commerce.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExportControlClassNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportControlClassNumber { get; set; }

        /// <summary>
        /// Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HtsusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtsusCode { get; set; }

        /// <summary>
        /// Code for Moisture Sensitivity Level of the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MoistureSensitivityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoistureSensitivityLevel { get; set; }

        /// <summary>
        /// Is Back Order not allowed? True if you cannot place a backorder; false if we will allow the product to be back-ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsBoNotAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBoNotAllowed { get; set; }

        /// <summary>
        /// Is product non-cancellable and non-returnable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsNcnr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNcnr { get; set; }

        /// <summary>
        /// The main category that the part is in(this does not include sub categories)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CategoryType> Categories { get; set; }

        /// <summary>
        /// Indicates if product contains lithium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContainsLithium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsLithium { get; set; }

        /// <summary>
        /// Indicates if product contains mercury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContainsMercury", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsMercury { get; set; }

        /// <summary>
        /// This product is no longer manufactured and will no longer be stocked once stock is depleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsEndOfLife", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEndOfLife { get; set; }

        /// <summary>
        /// Variations of the requested ProductPricing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductVariations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductPricingVariation> ProductVariations { get; set; }

    }

    /// <summary>
    /// A sub set of the product infromation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPricingResponse
    {
        /// <summary>
        /// List of Products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductPricings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductPricing> ProductPricings { get; set; }

        /// <summary>
        /// Total number of matching products found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("SettingsUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SettingsUsed SettingsUsed { get; set; }

    }

    /// <summary>
    /// Variations of the requested ProductPricing
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPricingVariation
    {
        /// <summary>
        /// DigiKey Product number of the variation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiKeyProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigiKeyProductNumber { get; set; }

        /// <summary>
        /// The quantity available for the specified variation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailableforPackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailableforPackageType { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageType PackageType { get; set; }

        /// <summary>
        /// Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketPlace { get; set; }

        /// <summary>
        /// Standard pricing for the validated locale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> StandardPricing { get; set; }

        /// <summary>
        /// Your pricing for the DigiKey customer number with which you authenticated. Also dependent on locale information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MyPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> MyPricing { get; set; }

        /// <summary>
        /// Indicates if tariff is active for variation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsTariffActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTariffActive { get; set; }

        /// <summary>
        /// Reeling fee per product ordered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiReelingFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DigiReelingFee { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductStatusV4
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    /// <summary>
    /// Product Substitute
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSubstitute
    {
        /// <summary>
        /// Substitute type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubstituteType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubstituteType { get; set; }

        /// <summary>
        /// Product url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Product Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>
        /// Manufacturer Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// Unit Price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Quantity Available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailable { get; set; }

    }

    /// <summary>
    /// Response model for ProductSubstitutes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSubstitutesResponse
    {
        /// <summary>
        /// Count of ProductSubstitutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductSubstitutesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductSubstitutesCount { get; set; }

        /// <summary>
        /// List of ProductSubstitutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductSubstitutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductSubstitute> ProductSubstitutes { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    /// <summary>
    /// Product Summary used by kits and associations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSummary
    {
        /// <summary>
        /// Product url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Product Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>
        /// Manufacturer Product Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// Unit Price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Quantity Available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailable { get; set; }

    }

    /// <summary>
    /// Variations of the requested product
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductVariation
    {
        /// <summary>
        /// DigiKey Product number of the variation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiKeyProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigiKeyProductNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageType PackageType { get; set; }

        /// <summary>
        /// Standard pricing for the validated locale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> StandardPricing { get; set; }

        /// <summary>
        /// Your pricing for the account with which you authenticated. Also dependent on locale information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MyPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceBreak> MyPricing { get; set; }

        /// <summary>
        /// Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketPlace { get; set; }

        /// <summary>
        /// Indicates if there is a tariff on the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TariffActive { get; set; }

        [Newtonsoft.Json.JsonProperty("Supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Supplier Supplier { get; set; }

        /// <summary>
        /// The quantity available for the specified variation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailableforPackageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailableforPackageType { get; set; }

        /// <summary>
        /// Maximum order quantity for Distribution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxQuantityForDistribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxQuantityForDistribution { get; set; }

        /// <summary>
        /// The Minimum Order Quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumOrderQuantity { get; set; }

        /// <summary>
        /// The number of products in the manufacturer's standard package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StandardPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StandardPackage { get; set; }

        /// <summary>
        /// Fee per reel ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiReelFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DigiReelFee { get; set; }

    }

    /// <summary>
    /// The collection of recommended products for the given product number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recommendation
    {
        /// <summary>
        /// The product number that the recommendations are for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// The list of recommended products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecommendedProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RecommendedProduct> RecommendedProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocaleUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

    }

    /// <summary>
    /// The recommended product based on the submitted DigiKeyProductNumber.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedProduct
    {
        /// <summary>
        /// The Digi-Key part number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DigiKeyProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigiKeyProductNumber { get; set; }

        /// <summary>
        /// The manufacturer part number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }

        /// <summary>
        /// The name of the manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The URL to the product’s image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrimaryPhoto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryPhoto { get; set; }

        /// <summary>
        /// Catalog description of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Quantity of the product available for immediate sale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QuantityAvailable { get; set; }

        /// <summary>
        /// The catalog price for a single unit of this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// URL of the Digi-Key catalog page to purchase the product. This is based on your provided header Locale values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductUrl { get; set; }

    }

    /// <summary>
    /// The recommended products returned grouped in collections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedProductsResponse
    {
        /// <summary>
        /// The list of RecommendedProductsCollections - each containing a Product and its recommendations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Recommendations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Recommendation> Recommendations { get; set; }

    }

    /// <summary>
    /// Manufacturers may group similar products into a series. This can be used to filter search results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Series
    {
        /// <summary>
        /// Series Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Series Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SettingsUsed
    {
        /// <summary>
        /// The CustomerId that was used for the search and pricing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("SearchLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsoSearchLocale SearchLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Filters Filters { get; set; }

    }

    /// <summary>
    /// Options available to sort by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortOptions
    {
        /// <summary>
        /// Field in response to sort by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortOptionsField? Field { get; set; }

        /// <summary>
        /// Direction to sort by Ascending or Descending
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortOptionsSortOrder? SortOrder { get; set; }

    }

    /// <summary>
    /// Supplier Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Supplier
    {
        /// <summary>
        /// Supplier Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Supplier Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Top Category Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopCategory
    {
        [Newtonsoft.Json.JsonProperty("RootCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopCategoryNode RootCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopCategoryNode Category { get; set; }

        /// <summary>
        /// Category Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Score { get; set; }

        /// <summary>
        /// URL for the Category image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }

    }

    /// <summary>
    /// Top Category Node Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopCategoryNode
    {
        /// <summary>
        /// Category Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Category Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Product count for the Category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ProductCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarketPlaceFilters
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoFilter")]
        NoFilter = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeMarketPlace")]
        ExcludeMarketPlace = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MarketPlaceOnly")]
        MarketPlaceOnly = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FilterOptionsRequestMarketPlaceFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoFilter")]
        NoFilter = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeMarketPlace")]
        ExcludeMarketPlace = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MarketPlaceOnly")]
        MarketPlaceOnly = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ChipOutpost")]
        ChipOutpost = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Has3DModel")]
        Has3DModel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HasCadModel")]
        HasCadModel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDatasheet")]
        HasDatasheet = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HasProductPhoto")]
        HasProductPhoto = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InStock")]
        InStock = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NewProduct")]
        NewProduct = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NonRohsCompliant")]
        NonRohsCompliant = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NormallyStocking")]
        NormallyStocking = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RohsCompliant")]
        RohsCompliant = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FilterValueRangeFilterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Min")]
        Min = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Max")]
        Max = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Range")]
        Range = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterValueParameterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UnitOfMeasure")]
        UnitOfMeasure = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CoupledUnitOfMeasure")]
        CoupledUnitOfMeasure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RangeUnitOfMeasure")]
        RangeUnitOfMeasure = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortOptionsField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Packaging")]
        Packaging = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductStatus")]
        ProductStatus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DigiKeyProductNumber")]
        DigiKeyProductNumber = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ManufacturerProductNumber")]
        ManufacturerProductNumber = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Manufacturer")]
        Manufacturer = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumQuantity")]
        MinimumQuantity = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"QuantityAvailable")]
        QuantityAvailable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Price")]
        Price = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Supplier")]
        Supplier = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PriceManufacturerStandardPackage")]
        PriceManufacturerStandardPackage = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortOptionsSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625